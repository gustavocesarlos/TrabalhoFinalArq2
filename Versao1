#include <stdio.h>
#include <math.h>

int main()
{
	/* screen ( integer) coordinate */
	int iX, iY;
	const int iXmax = 16384;
	const int iYmax = 16384;
	/* world ( double) coordinate = parameter plane*/
	double Cx[4], Cy;
	const double CxMin = -2.5;
	const double CxMax = 1.5;
	const double CyMin = -2.0;
	const double CyMax = 2.0;
	/* */
	double PixelWidth = (CxMax - CxMin) / iXmax;
	double PixelHeight = (CyMax - CyMin) / iYmax;
	/* color component ( R or G or B) is coded from 0 to 255 */
	/* it is 24 bit color RGB file */
	const int MaxColorComponentValue = 255;
	FILE * fp;
	char *filename = "mandelbrot.ppm";
	static unsigned char color[3];
	/* Z=Zx+Zy*i  ;   Z0 = 0 */
	double Zx[4], Zy[4];
	double Zx2[4], Zy2[4]; /* Zx2=Zx*Zx;  Zy2=Zy*Zy  */
	/*  */
	int Iteration;
	const int IterationMax = 256;
	/* bail-out value , radius of circle ;  */
	const double EscapeRadius = 2;
	double ER2 = EscapeRadius*EscapeRadius;
	/*create new file,give it a name and open it in binary mode  */
	fp = fopen(filename, "wb"); /* b -  binary mode */
	/*write ASCII header to the file*/
	fprintf(fp, "P6\n %d\n %d\n %d\n", iXmax, iYmax, MaxColorComponentValue);
	/* compute and write image data bytes to the file*/
	for (iY = 0; iY<iYmax; iY++)
	{
		Cy = CyMin + iY*PixelHeight;
		if (fabs(Cy)< PixelHeight / 2) Cy = 0.0; /* Main antenna */
		for (iX = 0; iX<iXmax; iX+=4)
		{
			Cx[0] = CxMin + iX*PixelWidth;
			Cx[1] = CxMin + (iX+1)*PixelWidth;
			Cx[2] = CxMin + (iX+2)*PixelWidth;
			Cx[3] = CxMin + (iX+3)*PixelWidth;
			
			/* initial value of orbit = critical point Z= 0 */
			Zx[3] = 0.0; Zx[2] = 0.0; Zx[1] = 0.0; Zx[0] = 0.0;
			Zy[3] = 0.0; Zy[2] = 0.0; Zy[1] = 0.0; Zy[0] = 0.0;
			Zx2[3] = Zx[3] * Zx[3]; Zx2[2] = Zx[2] * Zx[2]; Zx2[1] = Zx[1] * Zx[1]; Zx2[0] = Zx[0] * Zx[0];
			Zy2[3] = Zy[3] * Zy[3]; Zy2[2] = Zy[2] * Zy[2]; Zy2[1] = Zy[1] * Zy[1]; Zy2[0] = Zy[0] * Zy[0];
			/* */
			for (Iteration = 0; Iteration<IterationMax && ((Zx2 + Zy2)<ER2); Iteration++)
			{
				Zy = 2 * Zx*Zy + Cy;
				Zx = Zx2 - Zy2 + Cx;
				Zx2 = Zx*Zx;
				Zy2 = Zy*Zy;
			};
			/* compute  pixel color (24 bit = 3 bytes) */
			if (Iteration == IterationMax)
			{ /*  interior of Mandelbrot set = black */
				color[0] = 0;
				color[1] = 0;
				color[2] = 0;
			}
			else
			{ /* exterior of Mandelbrot set = white */
				color[0] = ((IterationMax - Iteration) % 8) * 63;  /* Red */
				color[1] = ((IterationMax - Iteration) % 4) * 127;  /* Green */
				color[2] = ((IterationMax - Iteration) % 2) * 255;  /* Blue */
			};
			/*write color to the file*/
			fwrite(color, 1, 3, fp);
		}
	}
	fclose(fp);
	return 0;
}
